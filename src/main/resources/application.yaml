spring:
  application:
    name: order-service
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}
    
  # Database Configuration
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:orderdb}
    username: ${DB_USER:admin}
    password: ${DB_PASSWORD:secret}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      pool-name: OrderServiceHikariPool
      
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true
        query:
          fail_on_pagination_over_collection_fetch: true
    show-sql: false
    open-in-view: false
    
  # Flyway Configuration
  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:db/migration
    
  # Redis Configuration
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000
      lettuce:
        pool:
          max-active: 10
          max-idle: 8
          min-idle: 2
          max-wait: -1ms
          
  # Cache Configuration (Caffeine)
  cache:
    type: caffeine
    caffeine:
      spec: maximumSize=${CAFFEINE_CACHE_MAX_SIZE:1000},expireAfterWrite=${CAFFEINE_CACHE_EXPIRE_MINUTES:5}m
    cache-names:
      - orders
      - order-items
      - customers
      - user-sessions
      
  # Security Configuration
  security:
    require-ssl: false
    
  # Jackson Configuration
  jackson:
    serialization:
      write-dates-as-timestamps: false
      fail-on-empty-beans: false
    deserialization:
      fail-on-unknown-properties: false
      accept-single-value-as-array: true
    default-property-inclusion: non_null
    
  # Task Execution Configuration
  task:
    execution:
      pool:
        core-size: 2
        max-size: 20
        queue-capacity: 100
        keep-alive: 60s
        thread-name-prefix: async-executor-
    scheduling:
      pool:
        size: 5
        thread-name-prefix: scheduled-task-
        
# Server Configuration
server:
  port: ${SERVER_PORT:8080}
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain
    min-response-size: 1024
  error:
    include-message: always
    include-binding-errors: always
  shutdown: graceful
  
# JWT Configuration
jwt:
  secret: ${JWT_SECRET:your-256-bit-secret-key-for-jwt-token-generation-must-be-at-least-256-bits}
  expiration: ${JWT_EXPIRATION:3600}
  refresh-expiration: ${JWT_REFRESH_EXPIRATION:86400}
  issuer: ecommerce-order-service
  
# Rate Limiting Configuration
rate-limit:
  enabled: true
  requests-per-minute: ${RATE_LIMIT_REQUESTS_PER_MINUTE:100}
  window-size-minutes: ${RATE_LIMIT_WINDOW_SIZE_MINUTES:1}
  
# Circuit Breaker Configuration (Resilience4j)
resilience4j:
  circuitbreaker:
    configs:
      default:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 10s
        failureRateThreshold: 50
        eventConsumerBufferSize: 10
        recordExceptions:
          - java.io.IOException
          - java.util.concurrent.TimeoutException
          - org.springframework.web.client.HttpServerErrorException
    instances:
      order-service:
        baseConfig: default
        
  retry:
    configs:
      default:
        maxAttempts: 3
        waitDuration: 1000
        retryExceptions:
          - java.io.IOException
          - java.util.concurrent.TimeoutException
    instances:
      order-service:
        baseConfig: default
        
  ratelimiter:
    configs:
      default:
        registerHealthIndicator: true
        limitForPeriod: 100
        limitRefreshPeriod: 1m
        timeoutDuration: 5s
        eventConsumerBufferSize: 100
    instances:
      order-service:
        baseConfig: default
        
# Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,circuitbreakers,ratelimiters,caches
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    tags:
      application: ${spring.application.name}
      environment: ${spring.profiles.active}
  tracing:
    sampling:
      probability: 1.0
      
# Logging Configuration
logging:
  level:
    root: INFO
    com.ecommerce.order: DEBUG
    org.springframework.web: INFO
    org.springframework.security: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/order-service.log
    max-size: 10MB
    max-history: 30
    
# OpenAPI/Swagger Configuration
springdoc:
  api-docs:
    enabled: true
    path: /v3/api-docs
  swagger-ui:
    enabled: true
    path: /swagger-ui.html
    try-it-out-enabled: true
    operations-sorter: method
    tags-sorter: alpha
    display-request-duration: true
    
# Application Specific Configuration
app:
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:3001}
    allowed-methods: GET,POST,PUT,DELETE,PATCH,OPTIONS
    allowed-headers: "*"
    exposed-headers: Authorization,Content-Type
    allow-credentials: true
    max-age: 3600
  pagination:
    default-page-size: 20
    max-page-size: 100
  scheduler:
    order-status-update:
      enabled: true
      cron: "0 */5 * * * *" # Every 5 minutes
      batch-size: 100